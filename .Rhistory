data$Attitude_Level<-factor(data$Attitude_Level,levels =c("Uncertain","Negative","Positive"),ordered=TRUE)
data$Attitude_Level<-factor(data$Attitude_Level,levels =c("Uncertain","Negative","Positive"),ordered=TRUE)
raw_data<-read_excel("Raw data/AMR_KAP_Data.xlsx")
data<-read_excel("Clean_data/Cleaned_KAP_Data.xlsx")
data$knowledge_Level<-factor(data$knowledge_Level,levels =c("Poor","Moderate","Good"),ordered=TRUE)
data |>
dplyr::select(1:9,knowledge_Level) |>
tbl_uvregression(
method =polr,
y=knowledge_Level,
pvalue_fun = function(x)style_pvalue(x,digits=3),
exponentiate = TRUE
)
data |>
dplyr::select(1:9,Attitude_Level) |>
tbl_uvregression(
method =polr,
y=Attitude_Level,
exponentiate = TRUE
)|>
bold_p(t=0.05)
data$Attitude_Level<-factor(data$Attitude_Level,levels =c("Uncertain","Negative","Positive"),ordered=TRUE)
data |>
dplyr::select(1:9,Attitude_Level) |>
tbl_uvregression(
method =polr,
y=Attitude_Level,
exponentiate = TRUE
)|>
as_gt()
data |>
dplyr::select(1:9,15:17,Practice_Level) |>
tbl_uvregression(
method = glm,
y=Practice_Level,
exponentiate=TRUE
) |>
bold_p(t=0.05)
data |>
dplyr::select(1:9,15:17,Practice_Level) |>
tbl_uvregression(
method = glm,
y=Practice_Level,
exponentiate=TRUE
) |>
as_gt()
data |>
dplyr::select(1:9,15:17,Practice_Level) |>
tbl_uvregression(
method = glm,
method.args = list(family=binomial),
y=Practice_Level,
exponentiate=TRUE
) |>
as_gt()
data <- data |>
mutate(Practices_level = case_when(
Practice_Level == "good use" ~ 1,
Practice_Level == "misuse" ~ 0
))
data |>
dplyr::select(1:9,15:16,Practices_Level) |>
tbl_uvregression(
method = glm,
method.args = list(family=binomial),
y=Practices_Level,
exponentiate=TRUE
) |>
as_gt()
data |>
dplyr::select(1:9,15:16,Practices_level) |>
tbl_uvregression(
method = glm,
method.args = list(family=binomial),
y=Practices_level,
exponentiate=TRUE
) |>
as_gt()
data |>
dplyr::select(1:9,Attitude_Level) |>
tbl_uvregression(
method =polr,
y=Attitude_Level,
exponentiate = TRUE
)|>
as_gt()|>
gtsave("Tables/Table5.docx")
# Factors associated with the level of practices regarding antibiotic resistance among parents of school going children
#recode
data <- data |>
mutate(Practices_level = case_when(
Practice_Level == "good use" ~ 1,
Practice_Level == "misuse" ~ 0
))
#
data |>
dplyr::select(1:9,15:16,Practices_level) |>
tbl_uvregression(
method = glm,
method.args = list(family=binomial),
y=Practices_level,
exponentiate=TRUE
) |>
as_gt() |>
gtsave("Tables/Table6.docx")
install.packages(c("ggthemes","hrbrthemes","ggsci","ggpubr"))
library(tidyverse)
library(ggplot2)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(tidyverse)
library(ggpubr)
data<-read_excel("Clean_data/Cleaned_KAP_Data.xlsx")
library(readxl)
data<-read_excel("Clean_data/Cleaned_KAP_Data.xlsx")
ggplot()
ggplot(mapping =aes(x="",y="") )
glimpse(data)
data$`Parent’s sex`<-as.factor(data$`Parent’s sex`)
data$`child sex`<-as.factor(data$`child sex`)
data$`child sex`<-as.factor(data$`child sex`)
data$`Child’s sex`<-as.factor(data$`Child sex`)
data$`Child’s sex`<-as.factor(data$`Child’s sex`)
data$`Who is the leading child caregiver at home`<-as.factor(data$`Who is the leading child caregiver at home`)
data$`Who is the leading child caregiver at home?`<-as.factor(data$`Who is the leading child caregiver at home?`)
str(data)
data$knowledge_Level<-as.factor(data$knowledge_Level)
data$Practice_Level<-as.factor(data$Practice_Level)
data$Attitude_Level<-as.factor(data$Attitude_Level)
data$knowledge_Level<-as.factor(data$knowledge_Level)
str(data)
ggplot(data = "",mapping = aes(x="",y=""))
ggplot(mapping = aes(x="",y="",))
ggplot(mapping = aes(x="",y="",))+geom_bar()
ggplot(data, aes(x=knowledge_Level))+geom_bar()
ggplot(data, aes(x=knowledge_Level))+
geom_boxplot()+
ggplot(data, aes(x=knowledge_Level))+
geom_boxplot()
ggplot(data, aes(x=knowledge_Level))+
geom_box()+
ggplot(data, aes(x=knowledge_Level))+
geom_box()
ggplot(data, aes(x=knowledge_Level))+
GeomMap
ggplot(data, aes(x=knowledge_Level))+
geom_bar()
ggplot(data, aes(x=knowledge_Level,fill = `Parent’s sex`))+
geom_bar()
ggplot(data, aes(x=knowledge_Level,fill = `Parent’s sex`))+
geom_bar()+
labs(x="knowledge",y="frequency")
ggplot(data, aes(x=knowledge_Level,fill = `Parent’s sex`))+
geom_bar()+
labs(x="knowledge",y="frequency",#labs function to state the name down and side information
title="distibution og knowledge by parents sex",
subtitle = "Knowledge",
)
ggplot(data, aes(x=knowledge_Level,fill = `Parent’s sex`))+
geom_bar()+
labs(x="knowledge",y="frequency",#labs function to state the name down and side information
title="distibution og knowledge by parents sex",
subtitle = "Knowledge",
caption = "shohan"
)
ggplot(data, aes(x=knowledge_Level,fill = `Parent’s sex`))+
geom_boxplot()+
labs(x="knowledge",y="frequency",#labs function to state the name down and side information
title="distibution og knowledge by parents sex",
subtitle = "Knowledge",
caption = "shohan"
)
data |>
group_by(`Child’s sex`) |>
summarise(freq=frequency(knowledge_of_antibiotics))
data |>
group_by(`Parent’s sex``) |>
summarise(freq=frequency(knowledge_of_antibiotics))
data |>
group_by(`Parent’s sex`) |>
data |>
group_by(`Parent’s sex`) |>
summarise(freq=frequency(knowledge_of_antibiotics))
data |>
group_by(knowledge_of_antibiotics) |>
summarise(freq=frequency(`Parent’s sex`))
data |>
group_by(knowledge_of_antibiotics) |>
summarise(freq=frequency(`Parent’s sex`),
percent=percent_rank(`Parent’s sex`)
)
library(gtsummary)
)
data |>
select(knowledge_of_antibiotics) |>
tbl_summary(
all_categorical()
)
data |>
select(knowledge_of_antibiotics) |>
tbl_summary(
all_categorical()
)
)
data |>
tbl_summary(
select(knowledge_of_antibiotics)
)
#box
ggplot(data, aes(x=knowledge_Level,fill = `Parent’s sex`))+
geom_boxplot()+
labs(x="knowledge",y="frequency",#labs function to state the name down and side information
title="distibution og knowledge by parents sex",
subtitle = "Knowledge",
caption = "shohan"
)
#bar
ggplot(data, aes(x=knowledge_Level,y= `Parent’s sex`))+
geom_bar()+
labs(x="knowledge",y="frequency",#labs function to state the name down and side information
title="distibution og knowledge by parents sex",
subtitle = "Knowledge",
caption = "shohan"
)
ggplot(data, aes(x=knowledge_Level,y= `Parent’s sex`))+
geom_bar()
ggplot(data, aes(x=knowledge_Level,y= `Parent’s sex`))+
geom_bar()
ggplot(data, aes(x=knowledge_Level,y= `Parent’s sex`))+
geom_boxplot()
ggplot(data,aes(x=knowledge_Level,y=`Parent’s education level`))+
geom_violin()
ggplot(data, aes(x=`Parent’s sex`,fill =knowledge_Level))+
geom_bar()
ggplot(data, aes(x=`Parent’s sex`,fill =knowledge_Level))+
geom_violin
ggplot(data, aes(x=`Parent’s sex`,fill =knowledge_Level))+
geom_violin
ggplot(data, aes(x=`Parent’s sex`,fill =knowledge_Level))+
geom_violin()
#bar
ggplot(data, aes(x=`Parent’s sex`,y =knowledge_Level))+
geom_violin()
ggplot(data,aes(x=`Parent’s sex`,y=knowledge_Level))+
geom_point()
cor(data$`Parent’s sex`,data$knowledge_Level)
cor(data$knowledge_of_antibiotics,data$`Parent’s sex`)
(data$knowledge_of_antibiotics,data$`Parent’s age`)
cor(data$knowledge_of_antibiotics,data$`Parent’s age (years)`)
(data$knowledge_of_antibiotics,data$`Number of children`)
cor(data$knowledge_of_antibiotics,data$`Number of children`,)
cor(data$knowledge_of_antibiotics,data$`Number of children`)
data$`Parent’s age (years)`<-as.factor(data$`Parent’s age (years)`)
cor(data$knowledge_of_antibiotics,data$`Parent’s age (years)`)
cor(data$knowledge_of_antibiotics,data$`Parent’s age (years)`)
data$`Parent’s age (years)`<-as.numeric(data$`Parent’s age (years)`)
cor(data$knowledge_of_antibiotics,data$`Parent’s age (years)`)
data$`Parent’s age (years)`<-as.character(data$`Parent’s age (years)`)
level<-ggplot(data, aes(x=`Parent’s sex`,fill=knowledge_Level))+
geom_bar()+
labs(x="knowledge",y="frequency",#labs function to state the name down and side information
title="distibution og knowledge by parents sex",
subtitle = "Knowledge",
caption = "shohan"
)
level<-ggplot(data, aes(x=`Parent’s sex`,fill=knowledge_Level))+
geom_bar()+
labs(x="knowledge",y="frequency",#labs function to state the name down and side information
title="distibution og knowledge by parents sex",
subtitle = "Knowledge",
caption = "shohan"
)
ggplot(data, aes(x=`Parent’s sex`,fill=knowledge_Level))+
geom_bar()+
labs(x="knowledge",y="frequency",#labs function to state the name down and side information
title="distibution og knowledge by parents sex",
subtitle = "Knowledge",
caption = "shohan"
)
#theme customization
level+theme_base()
level+theme_bw()
level+theme_bw()
level+theme_classic()
level+theme_economist()
level<-ggplot(data, aes(x=knowledge_Level,fill=`Parent’s sex`))+
geom_bar()+
labs(x="knowledge",y="frequency",#labs function to state the name down and side information
title="distibution og knowledge by parents sex",
subtitle = "Knowledge",
caption = "shohan"
)
ggplot(data, aes(x=knowledge_Level,fill=`Parent’s sex`))+
geom_bar()+
labs(x="knowledge",y="frequency",#labs function to state the name down and side information
title="distibution og knowledge by parents sex",
subtitle = "Knowledge",
caption = "shohan"
)
level+theme_economist()
level+theme_foundation()
level+scale_fill_canva()
level+scale_fill_canva()+
theme_economist()
level+scale_fill_canva()+
theme_economist()+
theme_dark()
#colour customization
level+scale_fill_economist()+
theme_economist()+
#colour customization
level+scale_fill_economist()+
theme_economist()+
#colour customization
level+scale_fill_excel()+
theme_economist()+
customization
#colour customization
level+scale_fill_few()+
theme_economist()
level+theme_economist(base_family ="Times New Roman")
level+theme_economist(base_family ="Times New Roman")+
scale_fill_canva()
level+theme_economist(base_family ="Arial")+
scale_fill_canva()
level+theme_economist(base_size = 18,base_family ="Arial")+
scale_fill_canva()
level+theme_economist(base_size = 2,base_family ="Arial")+
scale_fill_canva()
level+theme_economist(base_size = 42,base_family ="Arial")+
scale_fill_canva()
level+theme_economist(base_size = 15,base_family ="Arial")+
scale_fill_canva()
level+theme(axis.title = element_text(size = 28))
library(likert)
library(readxl)
library(sjPlot)
data<-read_excel("Clean_data/Cleaned_KAP_Data.xlsx")
raw_data<-read_excel("Raw data/AMR_KAP_Data.xlsx")
items<-itmes |>
select(starts_with(ST24Q)) |>
plot_likert(itmes)
library(tidyverse)
items<-itmes |>
select(starts_with(ST24Q)) |>
plot_likert(itmes)
itmes<-data("pisaitems")
items<-itmes |>
select(starts_with(ST24Q)) |>
plot_likert(itmes)
library(likert)
install.packages("likert")
install.packages("likert")
library(likert)
itmes<-data("pisaitems")
items<-itmes |>
select(starts_with(ST24Q)) |>
plot_likert(itmes)
items<-itmes |>
select(starts_with(ST24Q))
items<-itmes |>
select(starts_with(ST24Q))
items<-pisaitems |>
select(starts_with(ST24Q))
items<-pisaitems |>
select(starts_with(ST24Q))
library(dplyr)
library(likert)
# Load the pisaitems dataset
data("pisaitems")
# Select columns starting with "ST24Q"
items <- pisaitems %>%
select(starts_with("ST24Q"))
# Plot Likert responses
plot_likert(items)
items<-pisaitems |>
select(starts_with(ST24Q)) |>
plot_likert(itmes)
items<-pisaitems |>
select(starts_with("ST24Q")) |>
plot_likert(itmes)
itmes<-data("pisaitems")
items<-pisaitems |>
select(starts_with("ST24Q")) |>
plot_likert(itmes)
items<-pisaitems |>
select(starts_with("ST24Q"))
items<-pisaitems |>
select(starts_with("ST24Q")) |>
plot_likert(itmes)
plot_likert(itmes)
data<-read_excel("Clean_data/Cleaned_KAP_Data.xlsx")
library(readxl)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(tidyverse)
library(ggpubr)
library(readxl)
library(sjPlot)
library(readxl)
data<-read_excel("Clean_data/Cleaned_KAP_Data.xlsx")
raw_data<-read_excel("Raw data/AMR_KAP_Data.xlsx")
raw_data |>
select(12:23) |>
plot_likert(raw_data)
raw<-raw_data |>
select(12:23)
raw<-raw_data |>
select(12:23) |>
plot_likert(raw)
raw<-raw_data |>
select(12:23)
raw |>
plot_likert(raw)
raw<-raw_data |>
select(12:23)
plot_likert(raw)
head(raw)
# Convert selected columns to factors with levels "Don't Know", "No", and "Yes"
raw <- data.frame(lapply(raw, factor, levels = c("Don't Know", "No", "Yes")))
# Create a Likert plot using sjPlot
sjp.likert(
raw,
sort.frq = "pos.desc",       # Sort by descending positive responses
title = "Survey Responses on Antibiotics",
show.prc.sign = TRUE,        # Show percentages
geom.colors = c("gold", "grey", "steelblue"),  # Custom colors for responses
legend.title = "Response"   # Title for the legend
)
# Create a Likert plot using sjPlot
plot_likert(
raw,
sort.frq = "pos.desc",       # Sort by descending positive responses
title = "Survey Responses on Antibiotics",
show.prc.sign = TRUE,        # Show percentages
geom.colors = c("gold", "grey", "steelblue"),  # Custom colors for responses
legend.title = "Response"   # Title for the legend
)
Create a Likert plot using sjPlot
# Create a Likert plot using sjPlot
plot_likert(
raw,
sort.frq = "pos.desc",       # Sort by descending positive responses
title = "Survey Responses on Antibiotics",
show.prc.sign = TRUE,        # Show percentages
geom.colors = c("gold", "grey", "steelblue"),  # Custom colors for responses
legend.title = "Response"   # Title for the legend
)
unique(raw)
unique(raw$Antibiotic.kills.the.bacteria.Yes.)
unique(raw$X.Amoxicillin.is.an.antibiotic..Yes.)
raw <- data.frame(lapply(raw, function(x) {
factor(x, levels = c("Don't Know", "No", "Yes"))
}))
# Generate the plot
sjp.likert(
raw,
sort.frq = "pos.desc",       # Sort by descending positive responses
title = "Survey Responses on Antibiotics", # Customize the title
show.prc.sign = TRUE,        # Show percentages
geom.colors = c("gold", "grey", "steelblue"),  # Colors for the responses
legend.title = "Responses"   # Title for the legend
)
library(sjPlot)
# Generate the plot
sjp.likert(
raw,
sort.frq = "pos.desc",       # Sort by descending positive responses
title = "Survey Responses on Antibiotics", # Customize the title
show.prc.sign = TRUE,        # Show percentages
geom.colors = c("gold", "grey", "steelblue"),  # Colors for the responses
legend.title = "Responses"   # Title for the legend
)
# Generate the plot
plot.likert(
raw,
sort.frq = "pos.desc",       # Sort by descending positive responses
title = "Survey Responses on Antibiotics", # Customize the title
show.prc.sign = TRUE,        # Show percentages
geom.colors = c("gold", "grey", "steelblue"),  # Colors for the responses
legend.title = "Responses"   # Title for the legend
)
# Generate the plot
plot_likert(
raw,
sort.frq = "pos.desc",       # Sort by descending positive responses
title = "Survey Responses on Antibiotics", # Customize the title
show.prc.sign = TRUE,        # Show percentages
geom.colors = c("gold", "grey", "steelblue"),  # Colors for the responses
legend.title = "Responses"   # Title for the legend
)
sjp.lik
# Generate the plot
plot_likert(
raw,
sort.frq = "pos.desc",       # Sort by descending positive responses
title = "Survey Responses on Antibiotics", # Customize the title
show.prc.sign = TRUE,        # Show percentages
geom.colors = c("gold", "grey", "steelblue"),  # Colors for the responses
legend.title = "Responses"   # Title for the legend
)
# Generate the plot
plot_likert(
raw,
sort.frq = "pos.desc",       # Sort by descending positive responses
title = "Survey Responses on Antibiotics", # Customize the title
show.prc.sign = TRUE,        # Show percentages
geom.colors = c("gold", "grey", "steelblue"),  # Colors for the responses
legend.title = "Responses"   # Title for the legend
)
